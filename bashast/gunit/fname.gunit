gunit bashast;

fname:
"+%Y%m%d" -> (STRING + % Y % m % d)
"\"http://www.gnu.org/software/autoconf/autoconf.html\"" -> (STRING (QUOTED_STRING http : / / www . gnu . org / software / autoconf / autoconf . html))
"\"http://dev.gentoo.org/~mpagano/genpatches\"" -> (STRING (QUOTED_STRING http : / / dev . gentoo . org / ~mpagano / genpatches))
"\"\"" -> (STRING QUOTED_STRING)
"\"For more info on this patchset, and how to report problems, see:\"" -> (STRING (QUOTED_STRING For   more   info   on   this   patchset ,   and   how   to   report   problems ,   see :))
"\"asdf;!\"" -> (STRING (QUOTED_STRING asdf ; !))
"\"$(whoami)\"" -> (STRING (QUOTED_STRING (COMMAND_SUB (COMMAND (STRING whoami)))))
"\"`whoami`\"" -> (STRING (QUOTED_STRING (COMMAND_SUB (COMMAND (STRING whoami)))))
"'`whoami`'" -> (STRING (QUOTED_STRING ` whoami `))
"'$(whoami)'" -> (STRING (QUOTED_STRING $ ( whoami )))
"\"${P}\"" -> (STRING (QUOTED_STRING (VAR_REF P)))
"'${P}'" -> (STRING (QUOTED_STRING $ { P }))
"asdf#" -> (STRING asdf #)
"'asdf'" -> (STRING (QUOTED_STRING asdf))
"'asdf\"asdf'" -> (STRING (QUOTED_STRING asdf " asdf))
"\"asdf'asdf\"" -> (STRING (QUOTED_STRING asdf ' asdf))
"!/bin/bash" -> (STRING ! / bin / bash)
"ab?(g|h)"-> (STRING ab (MATCH_AT_MOST_ONE (STRING g) (STRING h)))
"ab*(gh|i)" -> (STRING ab (MATCH_ANY (STRING gh) (STRING i)))
"ab+(gh|i)" -> (STRING ab (MATCH_AT_LEAST_ONE (STRING gh) (STRING i)))
"ab@(gh|i)" -> (STRING ab (MATCH_EXACTLY_ONE (STRING gh) (STRING i)))
"ab!(gh|i)" -> (STRING ab (MATCH_NONE (STRING gh) (STRING i)))
"\"abc\"\'\"\'\"def\"" -> (STRING (QUOTED_STRING abc) (QUOTED_STRING ") (QUOTED_STRING def))
"my\ name\ is" -> (STRING my \  name \  is)
"octal\007" -> (STRING octal \007)
"hex\xaF" -> (STRING hex \xaF)
"ctrlx\cx" -> (STRING ctrlx \cx)
"tab\\ttab" -> "(STRING tab \\\t tab)"
"abc[def]" -> (STRING abc (MATCH_PATTERN def))
"a[]" -> (STRING a [ ])
"ab[d-h]" -> (STRING ab (MATCH_PATTERN d -h))
"ab[!d-h]" -> (STRING ab (MATCH_ANY_EXCEPT d -h))
"ab[]c]" -> (STRING ab (MATCH_PATTERN ] c))
"ab[:alpha:]" -> (STRING ab (MATCH_PATTERN : alpha :))
"ab[=c=]" -> (STRING ab (MATCH_PATTERN = c =))
"ab[.c.]" -> (STRING ab (MATCH_PATTERN . c .))
"ab[[:alpha:]]" -> (STRING ab (MATCH_PATTERN (CHARACTER_CLASS alpha)))
"ab[[=c=]]" -> (STRING ab (MATCH_PATTERN (EQUIVALENCE_CLASS c)))
"ab[[.backslash.]]" -> (STRING ab (MATCH_PATTERN (COLLATING_SYMBOL backslash)))
"ab[12[:alpha:]]" -> (STRING ab (MATCH_PATTERN 12 (CHARACTER_CLASS alpha)))
